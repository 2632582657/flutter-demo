一、vscode中控制虚拟机的快捷键
	R--点击热加载
	P--界面显示网格
	O--切换android和ios预览模式
	Q--退出调试
二、常用组件
	1.开发流程 固定写法
		1.引入基础组件样式
			import 'package:flutter/material.dart';
		2.使用箭头函数新建入口文件
			void main()=>runApp(MyApp());
		3.新建MyApp类 
			3.1.继承静态组件 重写build  返回窗口部件
				class MyApp extends StatelessWidget{
					@override
					  Widget build(BuildContext context){
						return 这是写显示在窗口中的内容;
					  }
				}
			3.2.或是继承动态组件
				class MyApp extends StatefulWidget {
				  _MyAppState createState() => _MyAppState();
				}

				class _MyAppState extends State<MyApp> {
				  @override
				  Widget build(BuildContext context) {
					return Container(
					   child: child,
					);
				  }
				}
	2.Text Widget
			属性
				1.textAlign--对齐方式  取值 TextAlign.left/rigth/center/start/end
				2.maxLines--最多大显示行数
				3.overflow--溢出处理   取值 TextOverflow.clip(溢出直接截断)/ellipsis(溢出用...代替)/fade(溢出渐隐)
				3.使用style属性处理文本样式 数值要写成.0的形式 详情见实例
						return MaterialApp(
							title: 'hello',
							home: Scaffold(      //选用脚手架构建
								appBar: AppBar(      //导航栏
									title: Text('data'),
								),
								body: Center(       
									child: Text(
										'hello world',
										textAlign: TextAlign.left, //对齐方式
										maxLines: 1,                //最大显示行数
										overflow: TextOverflow.ellipsis, //溢出处理
										style: TextStyle(              //处理文本样式
											fontSize: 25.0,          		//字体大小
											color: Color.fromARGB(255, 255, 150, 150), //字体颜色 也可以使用flutter预备好的颜色
											decoration: TextDecoration.underline,          //下划线
											decorationStyle: TextDecorationStyle.solid     //下划线样式
										),
									),
								),
							),
						);
	3.Container Widget 容器组件
		属性
			1.alignment--对齐方式 取值：AlignMent.topLeft/...等九种对齐方式
			2.width/height--设置宽高
			3.color--设置背景颜色
			4.padding--设置容器内边距 取值1.EdgeInsets.all(value)统一设置上下左右的内边。2.EdgeInsets.fromLTRB(v1,v2,v3,v4)分别设置上下左右内边
			5.margin--设置容器外边距  取值同内边距
			6.decoration--盒子修饰器 取值BoxDecoration()修饰器组件
				6.1.BoxDecoration(  修饰器组件 组件包含设置渐变色 和 边框等等
					gradient: LinearGradient(  渐变颜色设置
						colors: [Colors.blueAccent,Colors.redAccent,Colors.green] //设置颜色数组
					),
					border: Border.all(   //设置边框 或者使用Border()单边设置
						color: Colors.black,  //边框颜色
						width: 3.0,           //边框宽度
						style: BorderStyle.solid  //边框样式
					)
				)
		示例：
			return MaterialApp(
				title: 'container widget',
				home: Scaffold(
					appBar: AppBar(
						title: Text('Container'),
					),
					body: Center(
						child: Container(
							child: Text('hello container',style:TextStyle(fontSize:40.0)),
							alignment: Alignment.topLeft, //设置内容对齐方式
							width: 500.0,  //设置宽
							height: 400.0,  //设置高
							//color: Colors.blueAccent,  //背景颜色
							padding:EdgeInsets.fromLTRB(10.0, 30.0, 0.0, 0.0),//分别设置上下左右内边距
            	margin: EdgeInsets.all(20.0),//统一设置上下左右外边距
							decoration: BoxDecoration(  //盒子修饰器
								gradient: LinearGradient(     //设置渐变色
									colors: [Colors.blueAccent,Colors.redAccent,Colors.green]//颜色数组
								),
								border: Border.all(     //设置边框
									color: Colors.black,     
									width: 3.0,
									style: BorderStyle.solid
								)
							)
						),
					),
				),
    	);
	4.Image widget图片组件
		4.1.Image的几种引入方式
			1.Image.asset:--加载资源图片，会使打包是包体过大
			2.Image.network--加载网络资源图片
			3.Image.file--本体图片 如相机照相后的图片预览
			4.Image.memory--加载到内存中的图片
		4.2.属性
			1.scale:--图片缩放  值越大图越小
			2.fit--图片显示模式
				取值：BoxFit.fill--不保持原比例图片充满容器 
							BoxFix.contain--保持比例 显示图片在容器中能显示的最大
							BoxFix.cover--图片保持比例充满容器  不被拉伸可能会裁切
							BoxFix.fitWidth--图片宽度会完整显示 高度可能会裁切或拉伸
							BoxFix.fitHeight--图片高度会完整显示 宽度可能会裁切或拉伸
			3.定义图片混合模式
					先定义要混合的颜色
					color:Colors.greenAccent ,
					使用colorBlendMode属性进行图片混合模式
        	colorBlendMode: BlendMode.colorBurn取值多种多样
			4.repeat: --图片重复方式 取值：ImageRepeat.noRepeat/repeat/repeatX/repeatY 不重复/重复/X轴重复/Y轴重复
			示例
			return MaterialApp(
				title: 'container widget',
				home: Scaffold(
					appBar: AppBar(
						title: Text('Container'),
					),
					body: Center(
						child: Container(
							child: Image.network(
								'https://img.zcool.cn/community/01dca75c49c735a801213f263c6d27.jpg@1280w_1l_2o_100sh.jpg',
								//scale: 5.0,      //缩放
								// fit: BoxFit.fill,  //显示方式
								color:Colors.greenAccent , //图片颜色
								colorBlendMode: BlendMode.colorBurn  //混合模式
							),
							width: 400.0,
							height: 300.0,
							color: Colors.lightBlue,
						)
					),
				),
			);
	5.ListView widget 列表组件
		ListView列表组件 属性 children：<widget>[]数组类型 里边可以写构成列表的子项
		return MaterialApp(
			title: 'my app',
			home: Scaffold(
				appBar: AppBar(
				title: Text('Lsit View'),
				),
				body: ListView(  //使用列表组件
				children: <Widget>[
					ListTile(   //瓦片 相当于列表子项  列表子项不仅只是瓦片 还可以是图片以及其他组件
						leading: Icon(Icons.home),     //列表前的图标
						title: Text('data'),
					),
					ListTile(
						leading: Icon(Icons.email),
						title: Text('data'),
					),
					ListTile(
						leading: Icon(Icons.picture_as_pdf),
						title: Text('data'),
					),
				],
				)
			),
		);
		横向列表的使用
			为ListView添加scrollDirection属性实现横向滚动 取值Axis.horizontal 横向滚动
	6.自定义组件
		1.首先先自定义组件
			class MyList extends StatelessWidget{
				@override
				Widget build (BuildContext context){
					return ListView( 
						scrollDirection: Axis.horizontal,  //允许横向滚动
						children: <Widget>[   
							Container(
								width: 180.0,
								color:Colors.redAccent,
							),
							Container(
								width: 180.0,
								color:Colors.yellowAccent,
							),
							....
						],
					);
				}
			}
		2.再想用的地方调用
			return MaterialApp(
				title: 'my app',
				home: Scaffold(
					appBar: AppBar(
						title: Text('Lsit View'),
					),
					body: Center(
						child: Container(
							height: 200.0,
							child: MyList()  //调用自定义组件
						),
					)
				),
    		);
	7.动态列表
		1.传递参数 使用构造器构建1000条假数据 传递给MyApp
			void main()=>runApp(MyApp(
				items:List<String>.generate(1000, (i)=>'item is $i')
			));
		2.MyAPP接受参数
			class MyApp extends StatelessWidget {
				2.1定义String类型数组变量准备接受
				final List<String> items;
				2.2这是一个构造函数，除了Key，我们增加了一个必传参数，这里的@required意思就必传。
					:super如果父类没有无名无参数的默认构造函数，则子类必须手动调用一个父类构造函数。
				MyApp({Key key,@required this.items}):super(key:key);

				@override
				Widget build(BuildContext context) {
					return MaterialApp(
						title: 'my app',
						home: Scaffold(
							appBar: AppBar(
								title: Text('Lsit View'),
							),
					2.3使用动态列表组件LsitView.builder渲染数据 
							body: ListView.builder(
								//要显示的数据的长度
								itemCount: items.length,
								//要显示的数据的内容 是个函数
								itemBuilder: (context,index){
									//函数内返回 子项  子项中渲染每一条
									return ListTile(
										title: Text('${items[index]}'),
									);
								},
							)
						),
					);
				}
			}
	8.GridView 网格列表的使用
			GridView.count//可设置网格的列数  还有其他形式
		属性
			1.padding:--设置内边距
			2.crossAxisSpacing--副轴的空隙
			3.mainAxisSpacing--主轴间的空隙
			4.crossAxisCount--网格的列数 
			5.children: <Widget>[]--网格的内容
			6.childAspectRatio: 3/2--网格的高宽比
		示例：第一种写法
			  return MaterialApp(
					title: '电影海报',
					home: Scaffold(
						appBar: AppBar(
							title: Text('电影列表'),
						),
						body: GridView.count( 使用点的形式的网格
							padding: EdgeInsets.all(10.0), //设置内边距
							crossAxisSpacing: 10.0,  //网格间的空隙
							crossAxisCount: 3,       //网格的列数 
							children: <Widget>[
								Text('data'),
								Text('data'),
								Text('data'),

							],
						),
					),
				);
		示例：第二种写法
			return MaterialApp(
				title: '电影海报',
				home: Scaffold(
					appBar: AppBar(
						title: Text('电影列表'),
					),
					body: GridView(  
						gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(  
							crossAxisCount: 3, //网格的列数 
							mainAxisSpacing: 3.0,		//主轴间的空隙
							crossAxisSpacing: 3.0, //	副轴的空隙
							childAspectRatio: 3/2			//网格的高宽比
						),
						children: <Widget>[
							Image.network(
								'https://img.zcool.cn/community/01ec0a5c49c697a801213f266f95be.jpg@1280w_1l_2o_100sh.jpg',
								fit: BoxFit.fill,
							),
							....
						],
					),
				),
			);
	14.导航父子页面跳转返回
		组件解释
			1.RaisedButton按钮组件
				它有两个最基本的属性：
					child：可以放入容器，图标，文字。让你构建多彩的按钮。
					onPressed：点击事件的相应，一般会调用Navigator组件。
			2.Navigator.push 和 Navigator.pop
				Navigator.push：是跳转到下一个页面，它要接受两个参数一个是上下文context，另一个是要跳转的函数。
				Navigator.pop：是返回到上一个页面，使用时传递一个context（上下文）参数，
								使用时要注意的是，你必须是有上级页面的，也就是说上级页面使用了Navigator.push。
		1.新建第一个自定义页面组件OnePage 在新建组件中使用凸起按钮测试(RaisedButton) 绑定点击事件
		  调用导航方法Navigator.push传入上下文 和 flutter准备的导航组件MaterialPageRoute
		  在导航组件中的builder方法传入上下文context  返回要跳转的页面组件 builder:(context)=>TwoPage()
			void main(){
				runApp(MaterialApp(
					title:"父子间导航",
					home:OnePage(),  //新建的自定义组件
				));
			}
			class OnePage extends StatelessWidget{
				@override
				Widget build(BuildContext context){
					return Scaffold(
						appBar:AppBar(
							title:Text('页面一')
						),
						body:Center(
							RaisedButton(  凸起按钮
								child:Text('点击跳转'),
								onPress:(){ 为按钮绑定点击事件
									Navigator.push(context,MaterialPageRoute(  
										builder：(context)=>TwoPage()
									))
								}
							)
						)
					)
				}
			}
		2.新建第二个子页面 同样使用凸起按钮测试 绑定点击事件
			调用导航方法Navigator.pop传入上下文context返回父级
			class OnePage extends StatelessWidget{
				@override
				Widget build(BuildContext context){
					return Scaffold(
						appBar:AppBar(
							title:Text('页面一')
						),
						body:Center(
							RaisedButton(  凸起按钮
								child:Text('点击跳转'),
								onPress:(){ 为按钮绑定点击事件
									Navigator.pop(context)
								}
							)
						)
					)
				}
			}
	15.导航参数的传递和接收
		1.模拟商品列表和商品详情之间的跳转传参
			首先 抽象出一个商品类 包含两个属性 title desc
			调用构造方法并传入这两个属性
			class Product{
				final String title;
				final String desc;
				Product(this.title,this.desc);
			}
		2.继续创建入口函数 新建商品列表组件ProductList 在组件中使用数组的List.generate()方法模拟商品假数据products并传递给商品列表组件
			void main(){
				runApp(MaterialApp(
					title:'导航传参',
					home ProductList(
						调用数组的List.generate()方法生成20条假数据 每生成一天就返回一个Product对象并把所需的参数传递过去
						products:List.generate(20,(i)=>Product('商品$i','这是一个商品  编号$i'))
					)
				));
			}
		3.创建商品列表组件ProductList 接受在入口文件传入的假数据 
		4.使用Listview.builder动态渲染数据
		5.在onTab事件中写导航事件 并传递参数 返回详情页组件 传入参数
			class ProductList extends StatelessWidget{
				接着入口传入的数组类型Product泛型的假数据
				final List<Product> products;
				调用组件构造方法 接受参数 调用父类
				ProductList({Key key,@required this.products}):super(key:key);
				@override
				Widget build(BuildContext context) {
					return Scaffold(
						appBar: AppBar(
							title: Text('商品列表'),
						),
						body: ListView.builder(
							itemCount: products.length, //渲染数据的长度
							itemBuilder: (context,index){  //渲染数据的方法 有两个参数上下文和下标 
								return ListTile(			//return列表每一项
									title: Text(products[index].title),
									onTap:(){   //响应事件
										Navigator.push(context,MaterialPageRoute(
											参数传递
											builder:(context)=>ProductDetail(product:products[index])
										))
									},
								);
							}
						),
					);
				}
			}
		6.创建详情页组件 接受Product类型参数 渲染到组件
			class ProductDetail extends StatelessWidget{
				final Product product;
				ProductDetail({Key key,@required this.product}):super(Key:key);
				@override
				Widget build(BuildContext context) {
					return Scaffold(
					appBar: AppBar(title: Text('${product.title}'),),
						body: Center(
							child: Text('${product.desc}'),
						)
					);
				}
			}
	16.页面跳转并返回数据到父级
		1.建入口文件 挂在父级页面
			void main(){
				runApp(MaterialApp(
					title:'返回数据',
					home:OnePage() 自定义父级页面
				));
			}
		2.创建父级页面  页面中调用自定义按钮组件
			class OnePage extends StatelessWidget{
				@override
				Widget build(BuildContext context){
					return Scaffold(
						appBar:AppBar(title:Text('父级页面')),
						body:Center(
							child:RouteButton()//自定义按钮组件
						)
					);
				}
			}
		3.创建自定义按钮组件 调用凸起按钮RaisedButton 将点击事件单独封装为一个异步方法 onPress中调用
			异步等待子页面返回的数据 
			等待页面返回数据后 调用脚手架的showSnackBar(类似于toast)将收到的子页面的数据显示出来
			class RouteButton extends StatelessWidget{
				@override
				Widget build(BuildContext context){
					return RaisedButton(
						onPress:(){_navigateTo();},//调用异步导航方法
						child:Text('点击跳转')
					)
				}
				//将点击事件单独封装为一个异步方法 接受上下文参数
				_navigateTo(BuildContext context) async{
					//调用路由组件跳转到子页面
					final res= await Navigator.push(context,MaterialPageRoute(
						builder:(context)=>TwoPage()
					))
				}
			}
		4.新建子页面 采用column布局  调用突起按钮 点击事件调用Navgator.pop返回父级 
			pop接受的第一个参数为context上下文 之后的参数可返回给父级 讲数据作为pop之后的参数传递即可
			class You extends StatelessWidget {
				@override
				Widget build(BuildContext context) {
					return Scaffold(
						appBar: AppBar(title: Text('就是这里'),),
						body: Center(
							child: Column(
							children: <Widget>[
								RaisedButton(child: Text('找我干什么'),onPressed: (){Navigator.pop(context,'不用了,再见');},),
								RaisedButton(child: Text('又是你'),onPressed: (){Navigator.pop(context,'说了不想去,88');},)
							],
							),
						),
					);
				}
			}
	17.静态资源处理
		1.首先 在pubspec.yaml文件中声明
			assets:
			  - images/a.jpg
		2.通过Image.assets(..)引用
			return Container(
				child:Image.asset('images/a.jpg')
			);

	
